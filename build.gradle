buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.7'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
  }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

repositories {
  mavenCentral()
}

dependencies {
  compile 'args4j:args4j:2.33'
  compile 'com.jakewharton.android.repackaged:libcore-dex:2'
  compile 'com.jakewharton.android.repackaged:dalvik-dx:1'
  compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.0'
  testCompile 'junit:junit:4.12'
  testCompile 'com.google.guava:guava:19.0'
  testCompile 'com.google.truth:truth:0.28'
}

dokka {
  outputFormat 'javadoc'
  outputDirectory "$buildDir/javadoc"
}

shadowJar {
  classifier = ''
  relocate 'com.android', 'com.jakewharton.dex.internal.android'

  dependencies {
    include(dependency('com.jakewharton.android.repackaged:.*'))
  }
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
  classifier 'javadoc'
  from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task fatJar(type: Jar, dependsOn: 'compileJava') {
  from files(sourceSets.main.output.classesDir)
  from configurations.compile.asFileTree.files.collect { zipTree(it) }

  classifier 'fat'

  manifest {
   attributes 'Main-Class': 'com.jakewharton.dex.DexMethods'
  }
}

def binaryFile = new File(buildDir, "libs/$name-binary.jar")
task binaryJar << {
  def fatJarFile = fatJar.archivePath

  binaryFile.getParentFile().mkdirs()
  binaryFile << "#!/bin/sh\n\nexec java -jar \$0 \"\$@\"\n\n"
  fatJarFile.withInputStream { binaryFile.append it }

  binaryFile.setExecutable true, false
}
binaryJar.dependsOn(fatJar)

task copyBinary(type: Copy, dependsOn: 'binaryJar') {
  from(binaryFile)
  into buildDir
  rename(".*", project.name)
}
tasks.getByName('assemble').dependsOn('copyBinary')

configurations.runtime.artifacts.removeAll { it.archiveTask.is jar }
tasks.getByName('jar').enabled = false

artifacts {
  runtime shadowJar
  shadow sourcesJar
  shadow javadocJar
  shadow file: binaryFile, name: 'binary', type: 'jar', builtBy: binaryJar, classifier: 'binary'
}

def version() {
  return '1.2.1-SNAPSHOT'
}

def isReleaseBuild() {
  return version().contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

signing {
  required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.shadow
}

task uploadArchives(dependsOn: 'uploadShadow')

uploadShadow {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }
      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }

      pom.groupId = 'com.jakewharton.dex'
      pom.artifactId = 'dex-method-list'
      pom.version = version()

      pom.project {
        name 'Dex Method List'
        packaging 'jar'
        description 'A simple utility which lists all method references in a dex file.'
        url 'https://github.com/JakeWharton/dex-method-list'

        scm {
          connection 'git@github.com:JakeWharton/dex-method-list.git'
          url 'https://github.com/JakeWharton/dex-method-list'
        }

        licenses {
          license {
            name 'Apache 2.0'
            url 'http://opensource.org/licenses/Apache-2.0'
          }
        }

        developers {
          developer {
            id 'jakewharton'
            name 'Jake Wharton'
          }
        }
      }
    }
  }
}
